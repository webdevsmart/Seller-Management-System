{"version":3,"sources":["app/views/product/ProductService.js","app/views/product/ProductList.jsx"],"names":["getAllProducts","axios","get","getProductById","id","deleteProduct","post","addNewProduct","newFormData","config","updateProduct","NewProduct","duplicateProduct","options","filterType","customToolbarSelect","selectableRows","columnStyleWithWidth","width","ProductList","state","productList","shouldOpenConfirmationDialog","warningOpen","warningMessage","lightboxOpen","productImages","lightboxIndex","handleDialogClose","setState","shouldOpenEditorDialog","updatePageData","handleDeleteProduct","mid","handleDuplicateProduct","then","res","handleConfirmationResponse","tmpList","data","map","item","push","parent","parent_category","category","categories","a","join","handleClickAvatar","img","getMuiTheme","createMuiTheme","overrides","MUIDataTableBodyRow","root","backgroundColor","this","columns","name","label","filter","sort","empty","customHeadRender","index","column","key","style","customBodyRenderLite","dataIndex","href","onClick","className","src","path","props","history","_id","color","routeSegments","to","variant","elevation","theme","title","open","onConfirmDialogClose","onYesClick","text","mainSrc","nextSrc","length","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","Component"],"mappings":"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","file":"static/js/28.9d07a037.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getAllProducts = () => {\r\n  return axios.get(\"/api/products/list\");\r\n};\r\nexport const getProductById = id => {\r\n  return axios.get(`/api/products/get?_id=${id}`);\r\n};\r\nexport const deleteProduct = id => {\r\n  return axios.post(`/api/products/delete?_id=${id}`);\r\n};\r\nexport const addNewProduct = (newFormData, config) => {\r\n  return axios.post(\"/api/products/add\", newFormData, config);\r\n};\r\nexport const updateProduct = NewProduct => {\r\n  return axios.post(\"/api/products/update\", NewProduct);\r\n};\r\nexport const duplicateProduct = id => {\r\n  return axios.post(`/api/products/duplicate?_id=${id}`);\r\n}","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport {\r\n  IconButton,\r\n  Icon,\r\n  Button,\r\n  Card,\r\n  Avatar,\r\n  TableCell\r\n} from \"@material-ui/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getAllProducts, deleteProduct, duplicateProduct } from \"./ProductService\";\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst options = {\r\n  filterType: 'checkbox',\r\n  customToolbarSelect: () => {},\r\n  selectableRows: \"none\",\r\n};\r\n\r\nconst columnStyleWithWidth = {\r\n  width: \"100px\"\r\n}\r\n\r\nclass ProductList extends Component {\r\n  state = {\r\n    productList: [],\r\n    shouldOpenConfirmationDialog: false,\r\n    warningOpen: false,\r\n    warningMessage: \"\",\r\n    lightboxOpen: false,\r\n    productImages: [],\r\n    lightboxIndex: 0,\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.updatePageData();\r\n  };\r\n\r\n  handleDeleteProduct = mid => {\r\n    this.setState({\r\n      mid,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleDuplicateProduct = mid => {\r\n    duplicateProduct(mid).then((res) => {\r\n      this.updatePageData();\r\n    });\r\n  }\r\n\r\n  handleConfirmationResponse = () => {\r\n    deleteProduct(this.state.mid).then((res) => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    this.updatePageData();\r\n  }\r\n\r\n  updatePageData = () => {\r\n    getAllProducts().then((res) => {\r\n      let tmpList = [];\r\n      res.data.map((item) => {\r\n        tmpList.push({\r\n          ...item,\r\n          parent: item.parent_category.category,\r\n          categories: item.categories.map(a => a.category).join(),\r\n        });\r\n      });\r\n      this.setState({ productList: tmpList });\r\n    });\r\n  };\r\n\r\n  handleClickAvatar = (img) => {\r\n    this.setState({ productImages: img, lightboxOpen: true, lightboxIndex: 0, })\r\n  }\r\n  \r\n  getMuiTheme = () => createMuiTheme({\r\n    overrides: {\r\n      MUIDataTableBodyRow: {\r\n        root: {\r\n          '&:nth-child(odd)': {\r\n            backgroundColor: 'rgb(211 235 255 / 44%)'\r\n          },\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  render() {\r\n    let {\r\n      productList,\r\n      shouldOpenConfirmationDialog,\r\n      warningOpen,\r\n      warningMessage,\r\n      lightboxIndex,\r\n      lightboxOpen,\r\n      productImages,\r\n    } = this.state;\r\n    \r\n    const columns = [\r\n      {\r\n        name: \"\",\r\n        label: \"\",\r\n        options: {\r\n          filter: false,\r\n          sort: false,\r\n          empty: true,\r\n          customHeadRender: ({index, ...column}) => {\r\n            return (\r\n              <TableCell key={index} style={columnStyleWithWidth}>\r\n                  {column.label}\r\n              </TableCell>\r\n            )\r\n          },\r\n          customBodyRenderLite: (dataIndex) => {\r\n            return (\r\n              <>\r\n              {\r\n                this.state.productList[dataIndex] && (\r\n                  <a href=\"#!\" onClick={() => this.handleClickAvatar(this.state.productList[dataIndex].img)}>\r\n                    <Avatar\r\n                      className=\"avatar\"\r\n                      src={`/${this.state.productList[dataIndex].img[0].path}`}\r\n                    />\r\n                  </a>\r\n                )\r\n              }\r\n              </>\r\n            );\r\n          }\r\n        }\r\n      },\r\n      {\r\n        name: \"sku\",\r\n        label: \"SKU\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"upc\",\r\n        label: \"UPC\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"name\",\r\n        label: \"Name\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"parent\",\r\n        label: \"Parent\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"categories\",\r\n        label: \"Categories\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"notes\",\r\n        label: \"Notes\",\r\n        options: {\r\n          filter: true,\r\n          sort: true,\r\n        }\r\n      },\r\n      {\r\n        name: \"action\",\r\n        label: \"Action\",\r\n        options: {\r\n          filter: false,\r\n          sort: false,\r\n          empty: true,\r\n          customBodyRenderLite: (dataIndex) => {\r\n            return (\r\n              <>\r\n              <IconButton\r\n                onClick={() =>\r\n                  this.props.history.push(`/product/edit/${productList[dataIndex]._id}`)\r\n                }\r\n              >\r\n                <Icon color=\"primary\">edit</Icon>\r\n              </IconButton>\r\n              <IconButton onClick={() => this.handleDeleteProduct(this.state.productList[dataIndex]._id)}>\r\n                <Icon color=\"error\">delete</Icon>\r\n              </IconButton>\r\n              <IconButton onClick={() => this.handleDuplicateProduct(this.state.productList[dataIndex]._id)}>\r\n                <Icon color=\"warning\">content_copy</Icon>\r\n              </IconButton>\r\n              </>\r\n            );\r\n          }\r\n        }\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div className=\"m-sm-30\">\r\n        <div  className=\"mb-sm-30\">\r\n          <Breadcrumb routeSegments={[{ name: \"Product List\" }]} />\r\n        </div>\r\n\r\n        <Link to=\"/product/add-new\">\r\n          <Button\r\n            className=\"mb-16\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Add New Product\r\n          </Button>\r\n        </Link>\r\n        <Card className=\"w-100 overflow-auto\" elevation={6}>\r\n          <MuiThemeProvider theme={this.getMuiTheme()}>\r\n            <MUIDataTable\r\n              className=\"crud-table\"\r\n              title={\"Product List\"}\r\n              data={productList}\r\n              columns={columns}\r\n              options={options}\r\n            />\r\n          </MuiThemeProvider>\r\n\r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmationResponse}\r\n              text=\"Are you sure to delete?\"\r\n            />\r\n          )}\r\n          \r\n        </Card>\r\n        \r\n        { lightboxOpen && productImages && (\r\n          <Lightbox\r\n            mainSrc={`/${productImages[lightboxIndex].path}`}\r\n            nextSrc={`/${productImages[(lightboxIndex + 1) % productImages.length].path}`}\r\n            prevSrc={`/${productImages[(lightboxIndex + productImages.length - 1) % productImages.length].path}`}\r\n            onCloseRequest={() => this.setState({ lightboxOpen: false })}\r\n            onMovePrevRequest={() =>\r\n              this.setState({\r\n                lightboxIndex: (lightboxIndex + productImages.length - 1) % productImages.length,\r\n              })\r\n            }\r\n            onMoveNextRequest={() =>\r\n              this.setState({\r\n                lightboxIndex: (lightboxIndex + 1) % productImages.length,\r\n              })\r\n            }\r\n          />\r\n        )}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductList;\r\n"],"sourceRoot":""}